// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type StemcellService struct {
	FromAssetsFileStub        func(string) (map[string]interface{}, error)
	fromAssetsFileMutex       sync.RWMutex
	fromAssetsFileArgsForCall []struct {
		arg1 string
	}
	fromAssetsFileReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	fromAssetsFileReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	FromDirectoriesStub        func([]string) (map[string]interface{}, error)
	fromDirectoriesMutex       sync.RWMutex
	fromDirectoriesArgsForCall []struct {
		arg1 []string
	}
	fromDirectoriesReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	fromDirectoriesReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	FromTarballStub        func(string) (interface{}, error)
	fromTarballMutex       sync.RWMutex
	fromTarballArgsForCall []struct {
		arg1 string
	}
	fromTarballReturns struct {
		result1 interface{}
		result2 error
	}
	fromTarballReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StemcellService) FromAssetsFile(arg1 string) (map[string]interface{}, error) {
	fake.fromAssetsFileMutex.Lock()
	ret, specificReturn := fake.fromAssetsFileReturnsOnCall[len(fake.fromAssetsFileArgsForCall)]
	fake.fromAssetsFileArgsForCall = append(fake.fromAssetsFileArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FromAssetsFile", []interface{}{arg1})
	fake.fromAssetsFileMutex.Unlock()
	if fake.FromAssetsFileStub != nil {
		return fake.FromAssetsFileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fromAssetsFileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StemcellService) FromAssetsFileCallCount() int {
	fake.fromAssetsFileMutex.RLock()
	defer fake.fromAssetsFileMutex.RUnlock()
	return len(fake.fromAssetsFileArgsForCall)
}

func (fake *StemcellService) FromAssetsFileCalls(stub func(string) (map[string]interface{}, error)) {
	fake.fromAssetsFileMutex.Lock()
	defer fake.fromAssetsFileMutex.Unlock()
	fake.FromAssetsFileStub = stub
}

func (fake *StemcellService) FromAssetsFileArgsForCall(i int) string {
	fake.fromAssetsFileMutex.RLock()
	defer fake.fromAssetsFileMutex.RUnlock()
	argsForCall := fake.fromAssetsFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *StemcellService) FromAssetsFileReturns(result1 map[string]interface{}, result2 error) {
	fake.fromAssetsFileMutex.Lock()
	defer fake.fromAssetsFileMutex.Unlock()
	fake.FromAssetsFileStub = nil
	fake.fromAssetsFileReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *StemcellService) FromAssetsFileReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.fromAssetsFileMutex.Lock()
	defer fake.fromAssetsFileMutex.Unlock()
	fake.FromAssetsFileStub = nil
	if fake.fromAssetsFileReturnsOnCall == nil {
		fake.fromAssetsFileReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.fromAssetsFileReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *StemcellService) FromDirectories(arg1 []string) (map[string]interface{}, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.fromDirectoriesMutex.Lock()
	ret, specificReturn := fake.fromDirectoriesReturnsOnCall[len(fake.fromDirectoriesArgsForCall)]
	fake.fromDirectoriesArgsForCall = append(fake.fromDirectoriesArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("FromDirectories", []interface{}{arg1Copy})
	fake.fromDirectoriesMutex.Unlock()
	if fake.FromDirectoriesStub != nil {
		return fake.FromDirectoriesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fromDirectoriesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StemcellService) FromDirectoriesCallCount() int {
	fake.fromDirectoriesMutex.RLock()
	defer fake.fromDirectoriesMutex.RUnlock()
	return len(fake.fromDirectoriesArgsForCall)
}

func (fake *StemcellService) FromDirectoriesCalls(stub func([]string) (map[string]interface{}, error)) {
	fake.fromDirectoriesMutex.Lock()
	defer fake.fromDirectoriesMutex.Unlock()
	fake.FromDirectoriesStub = stub
}

func (fake *StemcellService) FromDirectoriesArgsForCall(i int) []string {
	fake.fromDirectoriesMutex.RLock()
	defer fake.fromDirectoriesMutex.RUnlock()
	argsForCall := fake.fromDirectoriesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *StemcellService) FromDirectoriesReturns(result1 map[string]interface{}, result2 error) {
	fake.fromDirectoriesMutex.Lock()
	defer fake.fromDirectoriesMutex.Unlock()
	fake.FromDirectoriesStub = nil
	fake.fromDirectoriesReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *StemcellService) FromDirectoriesReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.fromDirectoriesMutex.Lock()
	defer fake.fromDirectoriesMutex.Unlock()
	fake.FromDirectoriesStub = nil
	if fake.fromDirectoriesReturnsOnCall == nil {
		fake.fromDirectoriesReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.fromDirectoriesReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *StemcellService) FromTarball(arg1 string) (interface{}, error) {
	fake.fromTarballMutex.Lock()
	ret, specificReturn := fake.fromTarballReturnsOnCall[len(fake.fromTarballArgsForCall)]
	fake.fromTarballArgsForCall = append(fake.fromTarballArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FromTarball", []interface{}{arg1})
	fake.fromTarballMutex.Unlock()
	if fake.FromTarballStub != nil {
		return fake.FromTarballStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fromTarballReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StemcellService) FromTarballCallCount() int {
	fake.fromTarballMutex.RLock()
	defer fake.fromTarballMutex.RUnlock()
	return len(fake.fromTarballArgsForCall)
}

func (fake *StemcellService) FromTarballCalls(stub func(string) (interface{}, error)) {
	fake.fromTarballMutex.Lock()
	defer fake.fromTarballMutex.Unlock()
	fake.FromTarballStub = stub
}

func (fake *StemcellService) FromTarballArgsForCall(i int) string {
	fake.fromTarballMutex.RLock()
	defer fake.fromTarballMutex.RUnlock()
	argsForCall := fake.fromTarballArgsForCall[i]
	return argsForCall.arg1
}

func (fake *StemcellService) FromTarballReturns(result1 interface{}, result2 error) {
	fake.fromTarballMutex.Lock()
	defer fake.fromTarballMutex.Unlock()
	fake.FromTarballStub = nil
	fake.fromTarballReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *StemcellService) FromTarballReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.fromTarballMutex.Lock()
	defer fake.fromTarballMutex.Unlock()
	fake.FromTarballStub = nil
	if fake.fromTarballReturnsOnCall == nil {
		fake.fromTarballReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.fromTarballReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *StemcellService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fromAssetsFileMutex.RLock()
	defer fake.fromAssetsFileMutex.RUnlock()
	fake.fromDirectoriesMutex.RLock()
	defer fake.fromDirectoriesMutex.RUnlock()
	fake.fromTarballMutex.RLock()
	defer fake.fromTarballMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StemcellService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
