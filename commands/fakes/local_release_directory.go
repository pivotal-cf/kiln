// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	release2 "github.com/pivotal-cf/kiln/pkg/release"
	"sync"

	"github.com/pivotal-cf/kiln/commands"
)

type LocalReleaseDirectory struct {
	DeleteExtraReleasesStub        func([]release2.Local, bool) error
	deleteExtraReleasesMutex       sync.RWMutex
	deleteExtraReleasesArgsForCall []struct {
		arg1 []release2.Local
		arg2 bool
	}
	deleteExtraReleasesReturns struct {
		result1 error
	}
	deleteExtraReleasesReturnsOnCall map[int]struct {
		result1 error
	}
	GetLocalReleasesStub        func(string) ([]release2.Local, error)
	getLocalReleasesMutex       sync.RWMutex
	getLocalReleasesArgsForCall []struct {
		arg1 string
	}
	getLocalReleasesReturns struct {
		result1 []release2.Local
		result2 error
	}
	getLocalReleasesReturnsOnCall map[int]struct {
		result1 []release2.Local
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LocalReleaseDirectory) DeleteExtraReleases(arg1 []release2.Local, arg2 bool) error {
	var arg1Copy []release2.Local
	if arg1 != nil {
		arg1Copy = make([]release2.Local, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deleteExtraReleasesMutex.Lock()
	ret, specificReturn := fake.deleteExtraReleasesReturnsOnCall[len(fake.deleteExtraReleasesArgsForCall)]
	fake.deleteExtraReleasesArgsForCall = append(fake.deleteExtraReleasesArgsForCall, struct {
		arg1 []release2.Local
		arg2 bool
	}{arg1Copy, arg2})
	fake.recordInvocation("DeleteExtraReleases", []interface{}{arg1Copy, arg2})
	fake.deleteExtraReleasesMutex.Unlock()
	if fake.DeleteExtraReleasesStub != nil {
		return fake.DeleteExtraReleasesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteExtraReleasesReturns
	return fakeReturns.result1
}

func (fake *LocalReleaseDirectory) DeleteExtraReleasesCallCount() int {
	fake.deleteExtraReleasesMutex.RLock()
	defer fake.deleteExtraReleasesMutex.RUnlock()
	return len(fake.deleteExtraReleasesArgsForCall)
}

func (fake *LocalReleaseDirectory) DeleteExtraReleasesCalls(stub func([]release2.Local, bool) error) {
	fake.deleteExtraReleasesMutex.Lock()
	defer fake.deleteExtraReleasesMutex.Unlock()
	fake.DeleteExtraReleasesStub = stub
}

func (fake *LocalReleaseDirectory) DeleteExtraReleasesArgsForCall(i int) ([]release2.Local, bool) {
	fake.deleteExtraReleasesMutex.RLock()
	defer fake.deleteExtraReleasesMutex.RUnlock()
	argsForCall := fake.deleteExtraReleasesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *LocalReleaseDirectory) DeleteExtraReleasesReturns(result1 error) {
	fake.deleteExtraReleasesMutex.Lock()
	defer fake.deleteExtraReleasesMutex.Unlock()
	fake.DeleteExtraReleasesStub = nil
	fake.deleteExtraReleasesReturns = struct {
		result1 error
	}{result1}
}

func (fake *LocalReleaseDirectory) DeleteExtraReleasesReturnsOnCall(i int, result1 error) {
	fake.deleteExtraReleasesMutex.Lock()
	defer fake.deleteExtraReleasesMutex.Unlock()
	fake.DeleteExtraReleasesStub = nil
	if fake.deleteExtraReleasesReturnsOnCall == nil {
		fake.deleteExtraReleasesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteExtraReleasesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *LocalReleaseDirectory) GetLocalReleases(arg1 string) ([]release2.Local, error) {
	fake.getLocalReleasesMutex.Lock()
	ret, specificReturn := fake.getLocalReleasesReturnsOnCall[len(fake.getLocalReleasesArgsForCall)]
	fake.getLocalReleasesArgsForCall = append(fake.getLocalReleasesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetLocalReleases", []interface{}{arg1})
	fake.getLocalReleasesMutex.Unlock()
	if fake.GetLocalReleasesStub != nil {
		return fake.GetLocalReleasesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLocalReleasesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *LocalReleaseDirectory) GetLocalReleasesCallCount() int {
	fake.getLocalReleasesMutex.RLock()
	defer fake.getLocalReleasesMutex.RUnlock()
	return len(fake.getLocalReleasesArgsForCall)
}

func (fake *LocalReleaseDirectory) GetLocalReleasesCalls(stub func(string) ([]release2.Local, error)) {
	fake.getLocalReleasesMutex.Lock()
	defer fake.getLocalReleasesMutex.Unlock()
	fake.GetLocalReleasesStub = stub
}

func (fake *LocalReleaseDirectory) GetLocalReleasesArgsForCall(i int) string {
	fake.getLocalReleasesMutex.RLock()
	defer fake.getLocalReleasesMutex.RUnlock()
	argsForCall := fake.getLocalReleasesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *LocalReleaseDirectory) GetLocalReleasesReturns(result1 []release2.Local, result2 error) {
	fake.getLocalReleasesMutex.Lock()
	defer fake.getLocalReleasesMutex.Unlock()
	fake.GetLocalReleasesStub = nil
	fake.getLocalReleasesReturns = struct {
		result1 []release2.Local
		result2 error
	}{result1, result2}
}

func (fake *LocalReleaseDirectory) GetLocalReleasesReturnsOnCall(i int, result1 []release2.Local, result2 error) {
	fake.getLocalReleasesMutex.Lock()
	defer fake.getLocalReleasesMutex.Unlock()
	fake.GetLocalReleasesStub = nil
	if fake.getLocalReleasesReturnsOnCall == nil {
		fake.getLocalReleasesReturnsOnCall = make(map[int]struct {
			result1 []release2.Local
			result2 error
		})
	}
	fake.getLocalReleasesReturnsOnCall[i] = struct {
		result1 []release2.Local
		result2 error
	}{result1, result2}
}

func (fake *LocalReleaseDirectory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteExtraReleasesMutex.RLock()
	defer fake.deleteExtraReleasesMutex.RUnlock()
	fake.getLocalReleasesMutex.RLock()
	defer fake.getLocalReleasesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LocalReleaseDirectory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.LocalReleaseDirectory = new(LocalReleaseDirectory)
