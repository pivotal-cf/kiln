// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/pivotal-cf/kiln/internal/fetcher"
)

type S3Client struct {
	HeadObjectStub        func(*s3.HeadObjectInput) (*s3.HeadObjectOutput, error)
	headObjectMutex       sync.RWMutex
	headObjectArgsForCall []struct {
		arg1 *s3.HeadObjectInput
	}
	headObjectReturns struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}
	headObjectReturnsOnCall map[int]struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}
	ListObjectsV2Stub        func(*s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error)
	listObjectsV2Mutex       sync.RWMutex
	listObjectsV2ArgsForCall []struct {
		arg1 *s3.ListObjectsV2Input
	}
	listObjectsV2Returns struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	listObjectsV2ReturnsOnCall map[int]struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *S3Client) HeadObject(arg1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	fake.headObjectMutex.Lock()
	ret, specificReturn := fake.headObjectReturnsOnCall[len(fake.headObjectArgsForCall)]
	fake.headObjectArgsForCall = append(fake.headObjectArgsForCall, struct {
		arg1 *s3.HeadObjectInput
	}{arg1})
	stub := fake.HeadObjectStub
	fakeReturns := fake.headObjectReturns
	fake.recordInvocation("HeadObject", []interface{}{arg1})
	fake.headObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *S3Client) HeadObjectCallCount() int {
	fake.headObjectMutex.RLock()
	defer fake.headObjectMutex.RUnlock()
	return len(fake.headObjectArgsForCall)
}

func (fake *S3Client) HeadObjectCalls(stub func(*s3.HeadObjectInput) (*s3.HeadObjectOutput, error)) {
	fake.headObjectMutex.Lock()
	defer fake.headObjectMutex.Unlock()
	fake.HeadObjectStub = stub
}

func (fake *S3Client) HeadObjectArgsForCall(i int) *s3.HeadObjectInput {
	fake.headObjectMutex.RLock()
	defer fake.headObjectMutex.RUnlock()
	argsForCall := fake.headObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *S3Client) HeadObjectReturns(result1 *s3.HeadObjectOutput, result2 error) {
	fake.headObjectMutex.Lock()
	defer fake.headObjectMutex.Unlock()
	fake.HeadObjectStub = nil
	fake.headObjectReturns = struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *S3Client) HeadObjectReturnsOnCall(i int, result1 *s3.HeadObjectOutput, result2 error) {
	fake.headObjectMutex.Lock()
	defer fake.headObjectMutex.Unlock()
	fake.HeadObjectStub = nil
	if fake.headObjectReturnsOnCall == nil {
		fake.headObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.HeadObjectOutput
			result2 error
		})
	}
	fake.headObjectReturnsOnCall[i] = struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *S3Client) ListObjectsV2(arg1 *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error) {
	fake.listObjectsV2Mutex.Lock()
	ret, specificReturn := fake.listObjectsV2ReturnsOnCall[len(fake.listObjectsV2ArgsForCall)]
	fake.listObjectsV2ArgsForCall = append(fake.listObjectsV2ArgsForCall, struct {
		arg1 *s3.ListObjectsV2Input
	}{arg1})
	stub := fake.ListObjectsV2Stub
	fakeReturns := fake.listObjectsV2Returns
	fake.recordInvocation("ListObjectsV2", []interface{}{arg1})
	fake.listObjectsV2Mutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *S3Client) ListObjectsV2CallCount() int {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	return len(fake.listObjectsV2ArgsForCall)
}

func (fake *S3Client) ListObjectsV2Calls(stub func(*s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error)) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = stub
}

func (fake *S3Client) ListObjectsV2ArgsForCall(i int) *s3.ListObjectsV2Input {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	argsForCall := fake.listObjectsV2ArgsForCall[i]
	return argsForCall.arg1
}

func (fake *S3Client) ListObjectsV2Returns(result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	fake.listObjectsV2Returns = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *S3Client) ListObjectsV2ReturnsOnCall(i int, result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	if fake.listObjectsV2ReturnsOnCall == nil {
		fake.listObjectsV2ReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectsV2Output
			result2 error
		})
	}
	fake.listObjectsV2ReturnsOnCall[i] = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *S3Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.headObjectMutex.RLock()
	defer fake.headObjectMutex.RUnlock()
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *S3Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetcher.S3Client = new(S3Client)
