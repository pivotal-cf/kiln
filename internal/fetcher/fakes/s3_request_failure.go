// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/s3"
)

type S3RequestFailure struct {
	CodeStub        func() string
	codeMutex       sync.RWMutex
	codeArgsForCall []struct {
	}
	codeReturns struct {
		result1 string
	}
	codeReturnsOnCall map[int]struct {
		result1 string
	}
	ErrorStub        func() string
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
	}
	errorReturns struct {
		result1 string
	}
	errorReturnsOnCall map[int]struct {
		result1 string
	}
	HostIDStub        func() string
	hostIDMutex       sync.RWMutex
	hostIDArgsForCall []struct {
	}
	hostIDReturns struct {
		result1 string
	}
	hostIDReturnsOnCall map[int]struct {
		result1 string
	}
	MessageStub        func() string
	messageMutex       sync.RWMutex
	messageArgsForCall []struct {
	}
	messageReturns struct {
		result1 string
	}
	messageReturnsOnCall map[int]struct {
		result1 string
	}
	OrigErrStub        func() error
	origErrMutex       sync.RWMutex
	origErrArgsForCall []struct {
	}
	origErrReturns struct {
		result1 error
	}
	origErrReturnsOnCall map[int]struct {
		result1 error
	}
	RequestIDStub        func() string
	requestIDMutex       sync.RWMutex
	requestIDArgsForCall []struct {
	}
	requestIDReturns struct {
		result1 string
	}
	requestIDReturnsOnCall map[int]struct {
		result1 string
	}
	StatusCodeStub        func() int
	statusCodeMutex       sync.RWMutex
	statusCodeArgsForCall []struct {
	}
	statusCodeReturns struct {
		result1 int
	}
	statusCodeReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *S3RequestFailure) Code() string {
	fake.codeMutex.Lock()
	ret, specificReturn := fake.codeReturnsOnCall[len(fake.codeArgsForCall)]
	fake.codeArgsForCall = append(fake.codeArgsForCall, struct {
	}{})
	stub := fake.CodeStub
	fakeReturns := fake.codeReturns
	fake.recordInvocation("Code", []interface{}{})
	fake.codeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *S3RequestFailure) CodeCallCount() int {
	fake.codeMutex.RLock()
	defer fake.codeMutex.RUnlock()
	return len(fake.codeArgsForCall)
}

func (fake *S3RequestFailure) CodeCalls(stub func() string) {
	fake.codeMutex.Lock()
	defer fake.codeMutex.Unlock()
	fake.CodeStub = stub
}

func (fake *S3RequestFailure) CodeReturns(result1 string) {
	fake.codeMutex.Lock()
	defer fake.codeMutex.Unlock()
	fake.CodeStub = nil
	fake.codeReturns = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) CodeReturnsOnCall(i int, result1 string) {
	fake.codeMutex.Lock()
	defer fake.codeMutex.Unlock()
	fake.CodeStub = nil
	if fake.codeReturnsOnCall == nil {
		fake.codeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.codeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) Error() string {
	fake.errorMutex.Lock()
	ret, specificReturn := fake.errorReturnsOnCall[len(fake.errorArgsForCall)]
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
	}{})
	stub := fake.ErrorStub
	fakeReturns := fake.errorReturns
	fake.recordInvocation("Error", []interface{}{})
	fake.errorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *S3RequestFailure) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *S3RequestFailure) ErrorCalls(stub func() string) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = stub
}

func (fake *S3RequestFailure) ErrorReturns(result1 string) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = nil
	fake.errorReturns = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) ErrorReturnsOnCall(i int, result1 string) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = nil
	if fake.errorReturnsOnCall == nil {
		fake.errorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.errorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) HostID() string {
	fake.hostIDMutex.Lock()
	ret, specificReturn := fake.hostIDReturnsOnCall[len(fake.hostIDArgsForCall)]
	fake.hostIDArgsForCall = append(fake.hostIDArgsForCall, struct {
	}{})
	stub := fake.HostIDStub
	fakeReturns := fake.hostIDReturns
	fake.recordInvocation("HostID", []interface{}{})
	fake.hostIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *S3RequestFailure) HostIDCallCount() int {
	fake.hostIDMutex.RLock()
	defer fake.hostIDMutex.RUnlock()
	return len(fake.hostIDArgsForCall)
}

func (fake *S3RequestFailure) HostIDCalls(stub func() string) {
	fake.hostIDMutex.Lock()
	defer fake.hostIDMutex.Unlock()
	fake.HostIDStub = stub
}

func (fake *S3RequestFailure) HostIDReturns(result1 string) {
	fake.hostIDMutex.Lock()
	defer fake.hostIDMutex.Unlock()
	fake.HostIDStub = nil
	fake.hostIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) HostIDReturnsOnCall(i int, result1 string) {
	fake.hostIDMutex.Lock()
	defer fake.hostIDMutex.Unlock()
	fake.HostIDStub = nil
	if fake.hostIDReturnsOnCall == nil {
		fake.hostIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.hostIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) Message() string {
	fake.messageMutex.Lock()
	ret, specificReturn := fake.messageReturnsOnCall[len(fake.messageArgsForCall)]
	fake.messageArgsForCall = append(fake.messageArgsForCall, struct {
	}{})
	stub := fake.MessageStub
	fakeReturns := fake.messageReturns
	fake.recordInvocation("Message", []interface{}{})
	fake.messageMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *S3RequestFailure) MessageCallCount() int {
	fake.messageMutex.RLock()
	defer fake.messageMutex.RUnlock()
	return len(fake.messageArgsForCall)
}

func (fake *S3RequestFailure) MessageCalls(stub func() string) {
	fake.messageMutex.Lock()
	defer fake.messageMutex.Unlock()
	fake.MessageStub = stub
}

func (fake *S3RequestFailure) MessageReturns(result1 string) {
	fake.messageMutex.Lock()
	defer fake.messageMutex.Unlock()
	fake.MessageStub = nil
	fake.messageReturns = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) MessageReturnsOnCall(i int, result1 string) {
	fake.messageMutex.Lock()
	defer fake.messageMutex.Unlock()
	fake.MessageStub = nil
	if fake.messageReturnsOnCall == nil {
		fake.messageReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.messageReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) OrigErr() error {
	fake.origErrMutex.Lock()
	ret, specificReturn := fake.origErrReturnsOnCall[len(fake.origErrArgsForCall)]
	fake.origErrArgsForCall = append(fake.origErrArgsForCall, struct {
	}{})
	stub := fake.OrigErrStub
	fakeReturns := fake.origErrReturns
	fake.recordInvocation("OrigErr", []interface{}{})
	fake.origErrMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *S3RequestFailure) OrigErrCallCount() int {
	fake.origErrMutex.RLock()
	defer fake.origErrMutex.RUnlock()
	return len(fake.origErrArgsForCall)
}

func (fake *S3RequestFailure) OrigErrCalls(stub func() error) {
	fake.origErrMutex.Lock()
	defer fake.origErrMutex.Unlock()
	fake.OrigErrStub = stub
}

func (fake *S3RequestFailure) OrigErrReturns(result1 error) {
	fake.origErrMutex.Lock()
	defer fake.origErrMutex.Unlock()
	fake.OrigErrStub = nil
	fake.origErrReturns = struct {
		result1 error
	}{result1}
}

func (fake *S3RequestFailure) OrigErrReturnsOnCall(i int, result1 error) {
	fake.origErrMutex.Lock()
	defer fake.origErrMutex.Unlock()
	fake.OrigErrStub = nil
	if fake.origErrReturnsOnCall == nil {
		fake.origErrReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.origErrReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *S3RequestFailure) RequestID() string {
	fake.requestIDMutex.Lock()
	ret, specificReturn := fake.requestIDReturnsOnCall[len(fake.requestIDArgsForCall)]
	fake.requestIDArgsForCall = append(fake.requestIDArgsForCall, struct {
	}{})
	stub := fake.RequestIDStub
	fakeReturns := fake.requestIDReturns
	fake.recordInvocation("RequestID", []interface{}{})
	fake.requestIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *S3RequestFailure) RequestIDCallCount() int {
	fake.requestIDMutex.RLock()
	defer fake.requestIDMutex.RUnlock()
	return len(fake.requestIDArgsForCall)
}

func (fake *S3RequestFailure) RequestIDCalls(stub func() string) {
	fake.requestIDMutex.Lock()
	defer fake.requestIDMutex.Unlock()
	fake.RequestIDStub = stub
}

func (fake *S3RequestFailure) RequestIDReturns(result1 string) {
	fake.requestIDMutex.Lock()
	defer fake.requestIDMutex.Unlock()
	fake.RequestIDStub = nil
	fake.requestIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) RequestIDReturnsOnCall(i int, result1 string) {
	fake.requestIDMutex.Lock()
	defer fake.requestIDMutex.Unlock()
	fake.RequestIDStub = nil
	if fake.requestIDReturnsOnCall == nil {
		fake.requestIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.requestIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *S3RequestFailure) StatusCode() int {
	fake.statusCodeMutex.Lock()
	ret, specificReturn := fake.statusCodeReturnsOnCall[len(fake.statusCodeArgsForCall)]
	fake.statusCodeArgsForCall = append(fake.statusCodeArgsForCall, struct {
	}{})
	stub := fake.StatusCodeStub
	fakeReturns := fake.statusCodeReturns
	fake.recordInvocation("StatusCode", []interface{}{})
	fake.statusCodeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *S3RequestFailure) StatusCodeCallCount() int {
	fake.statusCodeMutex.RLock()
	defer fake.statusCodeMutex.RUnlock()
	return len(fake.statusCodeArgsForCall)
}

func (fake *S3RequestFailure) StatusCodeCalls(stub func() int) {
	fake.statusCodeMutex.Lock()
	defer fake.statusCodeMutex.Unlock()
	fake.StatusCodeStub = stub
}

func (fake *S3RequestFailure) StatusCodeReturns(result1 int) {
	fake.statusCodeMutex.Lock()
	defer fake.statusCodeMutex.Unlock()
	fake.StatusCodeStub = nil
	fake.statusCodeReturns = struct {
		result1 int
	}{result1}
}

func (fake *S3RequestFailure) StatusCodeReturnsOnCall(i int, result1 int) {
	fake.statusCodeMutex.Lock()
	defer fake.statusCodeMutex.Unlock()
	fake.StatusCodeStub = nil
	if fake.statusCodeReturnsOnCall == nil {
		fake.statusCodeReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.statusCodeReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *S3RequestFailure) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.codeMutex.RLock()
	defer fake.codeMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.hostIDMutex.RLock()
	defer fake.hostIDMutex.RUnlock()
	fake.messageMutex.RLock()
	defer fake.messageMutex.RUnlock()
	fake.origErrMutex.RLock()
	defer fake.origErrMutex.RUnlock()
	fake.requestIDMutex.RLock()
	defer fake.requestIDMutex.RUnlock()
	fake.statusCodeMutex.RLock()
	defer fake.statusCodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *S3RequestFailure) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ s3.RequestFailure = new(S3RequestFailure)
