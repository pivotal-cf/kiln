// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type IconService struct {
	EncodeStub        func(string) (string, error)
	encodeMutex       sync.RWMutex
	encodeArgsForCall []struct {
		arg1 string
	}
	encodeReturns struct {
		result1 string
		result2 error
	}
	encodeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IconService) Encode(arg1 string) (string, error) {
	fake.encodeMutex.Lock()
	ret, specificReturn := fake.encodeReturnsOnCall[len(fake.encodeArgsForCall)]
	fake.encodeArgsForCall = append(fake.encodeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.EncodeStub
	fakeReturns := fake.encodeReturns
	fake.recordInvocation("Encode", []interface{}{arg1})
	fake.encodeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *IconService) EncodeCallCount() int {
	fake.encodeMutex.RLock()
	defer fake.encodeMutex.RUnlock()
	return len(fake.encodeArgsForCall)
}

func (fake *IconService) EncodeCalls(stub func(string) (string, error)) {
	fake.encodeMutex.Lock()
	defer fake.encodeMutex.Unlock()
	fake.EncodeStub = stub
}

func (fake *IconService) EncodeArgsForCall(i int) string {
	fake.encodeMutex.RLock()
	defer fake.encodeMutex.RUnlock()
	argsForCall := fake.encodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *IconService) EncodeReturns(result1 string, result2 error) {
	fake.encodeMutex.Lock()
	defer fake.encodeMutex.Unlock()
	fake.EncodeStub = nil
	fake.encodeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *IconService) EncodeReturnsOnCall(i int, result1 string, result2 error) {
	fake.encodeMutex.Lock()
	defer fake.encodeMutex.Unlock()
	fake.EncodeStub = nil
	if fake.encodeReturnsOnCall == nil {
		fake.encodeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.encodeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *IconService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.encodeMutex.RLock()
	defer fake.encodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IconService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
