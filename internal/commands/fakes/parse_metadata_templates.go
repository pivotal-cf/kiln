// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type MetadataTemplatesParser struct {
	ParseMetadataTemplatesStub        func([]string, map[string]any) (map[string]any, error)
	parseMetadataTemplatesMutex       sync.RWMutex
	parseMetadataTemplatesArgsForCall []struct {
		arg1 []string
		arg2 map[string]any
	}
	parseMetadataTemplatesReturns struct {
		result1 map[string]any
		result2 error
	}
	parseMetadataTemplatesReturnsOnCall map[int]struct {
		result1 map[string]any
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MetadataTemplatesParser) ParseMetadataTemplates(arg1 []string, arg2 map[string]any) (map[string]any, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.parseMetadataTemplatesMutex.Lock()
	ret, specificReturn := fake.parseMetadataTemplatesReturnsOnCall[len(fake.parseMetadataTemplatesArgsForCall)]
	fake.parseMetadataTemplatesArgsForCall = append(fake.parseMetadataTemplatesArgsForCall, struct {
		arg1 []string
		arg2 map[string]any
	}{arg1Copy, arg2})
	stub := fake.ParseMetadataTemplatesStub
	fakeReturns := fake.parseMetadataTemplatesReturns
	fake.recordInvocation("ParseMetadataTemplates", []interface{}{arg1Copy, arg2})
	fake.parseMetadataTemplatesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MetadataTemplatesParser) ParseMetadataTemplatesCallCount() int {
	fake.parseMetadataTemplatesMutex.RLock()
	defer fake.parseMetadataTemplatesMutex.RUnlock()
	return len(fake.parseMetadataTemplatesArgsForCall)
}

func (fake *MetadataTemplatesParser) ParseMetadataTemplatesCalls(stub func([]string, map[string]any) (map[string]any, error)) {
	fake.parseMetadataTemplatesMutex.Lock()
	defer fake.parseMetadataTemplatesMutex.Unlock()
	fake.ParseMetadataTemplatesStub = stub
}

func (fake *MetadataTemplatesParser) ParseMetadataTemplatesArgsForCall(i int) ([]string, map[string]any) {
	fake.parseMetadataTemplatesMutex.RLock()
	defer fake.parseMetadataTemplatesMutex.RUnlock()
	argsForCall := fake.parseMetadataTemplatesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *MetadataTemplatesParser) ParseMetadataTemplatesReturns(result1 map[string]any, result2 error) {
	fake.parseMetadataTemplatesMutex.Lock()
	defer fake.parseMetadataTemplatesMutex.Unlock()
	fake.ParseMetadataTemplatesStub = nil
	fake.parseMetadataTemplatesReturns = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *MetadataTemplatesParser) ParseMetadataTemplatesReturnsOnCall(i int, result1 map[string]any, result2 error) {
	fake.parseMetadataTemplatesMutex.Lock()
	defer fake.parseMetadataTemplatesMutex.Unlock()
	fake.ParseMetadataTemplatesStub = nil
	if fake.parseMetadataTemplatesReturnsOnCall == nil {
		fake.parseMetadataTemplatesReturnsOnCall = make(map[int]struct {
			result1 map[string]any
			result2 error
		})
	}
	fake.parseMetadataTemplatesReturnsOnCall[i] = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *MetadataTemplatesParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseMetadataTemplatesMutex.RLock()
	defer fake.parseMetadataTemplatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MetadataTemplatesParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
