// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/moby/buildkit/session"
)

type SessionDialer struct {
	AllowStub        func(session.Attachable)
	allowMutex       sync.RWMutex
	allowArgsForCall []struct {
		arg1 session.Attachable
	}
	RunStub        func(context.Context, session.Dialer) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 context.Context
		arg2 session.Dialer
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]any
	invocationsMutex sync.RWMutex
}

func (fake *SessionDialer) Allow(arg1 session.Attachable) {
	fake.allowMutex.Lock()
	fake.allowArgsForCall = append(fake.allowArgsForCall, struct {
		arg1 session.Attachable
	}{arg1})
	stub := fake.AllowStub
	fake.recordInvocation("Allow", []any{arg1})
	fake.allowMutex.Unlock()
	if stub != nil {
		fake.AllowStub(arg1)
	}
}

func (fake *SessionDialer) AllowCallCount() int {
	fake.allowMutex.RLock()
	defer fake.allowMutex.RUnlock()
	return len(fake.allowArgsForCall)
}

func (fake *SessionDialer) AllowCalls(stub func(session.Attachable)) {
	fake.allowMutex.Lock()
	defer fake.allowMutex.Unlock()
	fake.AllowStub = stub
}

func (fake *SessionDialer) AllowArgsForCall(i int) session.Attachable {
	fake.allowMutex.RLock()
	defer fake.allowMutex.RUnlock()
	argsForCall := fake.allowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SessionDialer) Run(arg1 context.Context, arg2 session.Dialer) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 context.Context
		arg2 session.Dialer
	}{arg1, arg2})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []any{arg1, arg2})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SessionDialer) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *SessionDialer) RunCalls(stub func(context.Context, session.Dialer) error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *SessionDialer) RunArgsForCall(i int) (context.Context, session.Dialer) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *SessionDialer) RunReturns(result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *SessionDialer) RunReturnsOnCall(i int, result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SessionDialer) Invocations() map[string][][]any {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allowMutex.RLock()
	defer fake.allowMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	copiedInvocations := map[string][][]any{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SessionDialer) recordInvocation(key string, args []any) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]any{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]any{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
