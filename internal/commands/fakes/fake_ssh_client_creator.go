// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"sync"

	"github.com/pivotal-cf/kiln/internal/commands"
)

type SshClientCreator struct {
	NewClientStub        func(io.ReadWriter) commands.SSHAgent
	newClientMutex       sync.RWMutex
	newClientArgsForCall []struct {
		arg1 io.ReadWriter
	}
	newClientReturns struct {
		result1 commands.SSHAgent
	}
	newClientReturnsOnCall map[int]struct {
		result1 commands.SSHAgent
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SshClientCreator) NewClient(arg1 io.ReadWriter) commands.SSHAgent {
	fake.newClientMutex.Lock()
	ret, specificReturn := fake.newClientReturnsOnCall[len(fake.newClientArgsForCall)]
	fake.newClientArgsForCall = append(fake.newClientArgsForCall, struct {
		arg1 io.ReadWriter
	}{arg1})
	stub := fake.NewClientStub
	fakeReturns := fake.newClientReturns
	fake.recordInvocation("NewClient", []interface{}{arg1})
	fake.newClientMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SshClientCreator) NewClientCallCount() int {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	return len(fake.newClientArgsForCall)
}

func (fake *SshClientCreator) NewClientCalls(stub func(io.ReadWriter) commands.SSHAgent) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = stub
}

func (fake *SshClientCreator) NewClientArgsForCall(i int) io.ReadWriter {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	argsForCall := fake.newClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SshClientCreator) NewClientReturns(result1 commands.SSHAgent) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = nil
	fake.newClientReturns = struct {
		result1 commands.SSHAgent
	}{result1}
}

func (fake *SshClientCreator) NewClientReturnsOnCall(i int, result1 commands.SSHAgent) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = nil
	if fake.newClientReturnsOnCall == nil {
		fake.newClientReturnsOnCall = make(map[int]struct {
			result1 commands.SSHAgent
		})
	}
	fake.newClientReturnsOnCall[i] = struct {
		result1 commands.SSHAgent
	}{result1}
}

func (fake *SshClientCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SshClientCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.SSHClientCreator = new(SshClientCreator)
