// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type TemplateVariablesService struct {
	FromPathsAndPairsStub        func([]string, []string) (map[string]any, error)
	fromPathsAndPairsMutex       sync.RWMutex
	fromPathsAndPairsArgsForCall []struct {
		arg1 []string
		arg2 []string
	}
	fromPathsAndPairsReturns struct {
		result1 map[string]any
		result2 error
	}
	fromPathsAndPairsReturnsOnCall map[int]struct {
		result1 map[string]any
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TemplateVariablesService) FromPathsAndPairs(arg1 []string, arg2 []string) (map[string]any, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.fromPathsAndPairsMutex.Lock()
	ret, specificReturn := fake.fromPathsAndPairsReturnsOnCall[len(fake.fromPathsAndPairsArgsForCall)]
	fake.fromPathsAndPairsArgsForCall = append(fake.fromPathsAndPairsArgsForCall, struct {
		arg1 []string
		arg2 []string
	}{arg1Copy, arg2Copy})
	stub := fake.FromPathsAndPairsStub
	fakeReturns := fake.fromPathsAndPairsReturns
	fake.recordInvocation("FromPathsAndPairs", []interface{}{arg1Copy, arg2Copy})
	fake.fromPathsAndPairsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TemplateVariablesService) FromPathsAndPairsCallCount() int {
	fake.fromPathsAndPairsMutex.RLock()
	defer fake.fromPathsAndPairsMutex.RUnlock()
	return len(fake.fromPathsAndPairsArgsForCall)
}

func (fake *TemplateVariablesService) FromPathsAndPairsCalls(stub func([]string, []string) (map[string]any, error)) {
	fake.fromPathsAndPairsMutex.Lock()
	defer fake.fromPathsAndPairsMutex.Unlock()
	fake.FromPathsAndPairsStub = stub
}

func (fake *TemplateVariablesService) FromPathsAndPairsArgsForCall(i int) ([]string, []string) {
	fake.fromPathsAndPairsMutex.RLock()
	defer fake.fromPathsAndPairsMutex.RUnlock()
	argsForCall := fake.fromPathsAndPairsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TemplateVariablesService) FromPathsAndPairsReturns(result1 map[string]any, result2 error) {
	fake.fromPathsAndPairsMutex.Lock()
	defer fake.fromPathsAndPairsMutex.Unlock()
	fake.FromPathsAndPairsStub = nil
	fake.fromPathsAndPairsReturns = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *TemplateVariablesService) FromPathsAndPairsReturnsOnCall(i int, result1 map[string]any, result2 error) {
	fake.fromPathsAndPairsMutex.Lock()
	defer fake.fromPathsAndPairsMutex.Unlock()
	fake.FromPathsAndPairsStub = nil
	if fake.fromPathsAndPairsReturnsOnCall == nil {
		fake.fromPathsAndPairsReturnsOnCall = make(map[int]struct {
			result1 map[string]any
			result2 error
		})
	}
	fake.fromPathsAndPairsReturnsOnCall[i] = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *TemplateVariablesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fromPathsAndPairsMutex.RLock()
	defer fake.fromPathsAndPairsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TemplateVariablesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
