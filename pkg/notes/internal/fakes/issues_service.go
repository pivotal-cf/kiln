// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/google/go-github/v40/github"
)

type IssuesService struct {
	GetStub        func(context.Context, string, string, int) (*github.Issue, *github.Response, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	getReturns struct {
		result1 *github.Issue
		result2 *github.Response
		result3 error
	}
	getReturnsOnCall map[int]struct {
		result1 *github.Issue
		result2 *github.Response
		result3 error
	}
	ListByRepoStub        func(context.Context, string, string, *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error)
	listByRepoMutex       sync.RWMutex
	listByRepoArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.IssueListByRepoOptions
	}
	listByRepoReturns struct {
		result1 []*github.Issue
		result2 *github.Response
		result3 error
	}
	listByRepoReturnsOnCall map[int]struct {
		result1 []*github.Issue
		result2 *github.Response
		result3 error
	}
	ListMilestonesStub        func(context.Context, string, string, *github.MilestoneListOptions) ([]*github.Milestone, *github.Response, error)
	listMilestonesMutex       sync.RWMutex
	listMilestonesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.MilestoneListOptions
	}
	listMilestonesReturns struct {
		result1 []*github.Milestone
		result2 *github.Response
		result3 error
	}
	listMilestonesReturnsOnCall map[int]struct {
		result1 []*github.Milestone
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IssuesService) Get(arg1 context.Context, arg2 string, arg3 string, arg4 int) (*github.Issue, *github.Response, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3, arg4})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *IssuesService) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *IssuesService) GetCalls(stub func(context.Context, string, string, int) (*github.Issue, *github.Response, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *IssuesService) GetArgsForCall(i int) (context.Context, string, string, int) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *IssuesService) GetReturns(result1 *github.Issue, result2 *github.Response, result3 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *github.Issue
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *IssuesService) GetReturnsOnCall(i int, result1 *github.Issue, result2 *github.Response, result3 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *github.Issue
			result2 *github.Response
			result3 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *github.Issue
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *IssuesService) ListByRepo(arg1 context.Context, arg2 string, arg3 string, arg4 *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error) {
	fake.listByRepoMutex.Lock()
	ret, specificReturn := fake.listByRepoReturnsOnCall[len(fake.listByRepoArgsForCall)]
	fake.listByRepoArgsForCall = append(fake.listByRepoArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.IssueListByRepoOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListByRepoStub
	fakeReturns := fake.listByRepoReturns
	fake.recordInvocation("ListByRepo", []interface{}{arg1, arg2, arg3, arg4})
	fake.listByRepoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *IssuesService) ListByRepoCallCount() int {
	fake.listByRepoMutex.RLock()
	defer fake.listByRepoMutex.RUnlock()
	return len(fake.listByRepoArgsForCall)
}

func (fake *IssuesService) ListByRepoCalls(stub func(context.Context, string, string, *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error)) {
	fake.listByRepoMutex.Lock()
	defer fake.listByRepoMutex.Unlock()
	fake.ListByRepoStub = stub
}

func (fake *IssuesService) ListByRepoArgsForCall(i int) (context.Context, string, string, *github.IssueListByRepoOptions) {
	fake.listByRepoMutex.RLock()
	defer fake.listByRepoMutex.RUnlock()
	argsForCall := fake.listByRepoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *IssuesService) ListByRepoReturns(result1 []*github.Issue, result2 *github.Response, result3 error) {
	fake.listByRepoMutex.Lock()
	defer fake.listByRepoMutex.Unlock()
	fake.ListByRepoStub = nil
	fake.listByRepoReturns = struct {
		result1 []*github.Issue
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *IssuesService) ListByRepoReturnsOnCall(i int, result1 []*github.Issue, result2 *github.Response, result3 error) {
	fake.listByRepoMutex.Lock()
	defer fake.listByRepoMutex.Unlock()
	fake.ListByRepoStub = nil
	if fake.listByRepoReturnsOnCall == nil {
		fake.listByRepoReturnsOnCall = make(map[int]struct {
			result1 []*github.Issue
			result2 *github.Response
			result3 error
		})
	}
	fake.listByRepoReturnsOnCall[i] = struct {
		result1 []*github.Issue
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *IssuesService) ListMilestones(arg1 context.Context, arg2 string, arg3 string, arg4 *github.MilestoneListOptions) ([]*github.Milestone, *github.Response, error) {
	fake.listMilestonesMutex.Lock()
	ret, specificReturn := fake.listMilestonesReturnsOnCall[len(fake.listMilestonesArgsForCall)]
	fake.listMilestonesArgsForCall = append(fake.listMilestonesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.MilestoneListOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListMilestonesStub
	fakeReturns := fake.listMilestonesReturns
	fake.recordInvocation("ListMilestones", []interface{}{arg1, arg2, arg3, arg4})
	fake.listMilestonesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *IssuesService) ListMilestonesCallCount() int {
	fake.listMilestonesMutex.RLock()
	defer fake.listMilestonesMutex.RUnlock()
	return len(fake.listMilestonesArgsForCall)
}

func (fake *IssuesService) ListMilestonesCalls(stub func(context.Context, string, string, *github.MilestoneListOptions) ([]*github.Milestone, *github.Response, error)) {
	fake.listMilestonesMutex.Lock()
	defer fake.listMilestonesMutex.Unlock()
	fake.ListMilestonesStub = stub
}

func (fake *IssuesService) ListMilestonesArgsForCall(i int) (context.Context, string, string, *github.MilestoneListOptions) {
	fake.listMilestonesMutex.RLock()
	defer fake.listMilestonesMutex.RUnlock()
	argsForCall := fake.listMilestonesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *IssuesService) ListMilestonesReturns(result1 []*github.Milestone, result2 *github.Response, result3 error) {
	fake.listMilestonesMutex.Lock()
	defer fake.listMilestonesMutex.Unlock()
	fake.ListMilestonesStub = nil
	fake.listMilestonesReturns = struct {
		result1 []*github.Milestone
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *IssuesService) ListMilestonesReturnsOnCall(i int, result1 []*github.Milestone, result2 *github.Response, result3 error) {
	fake.listMilestonesMutex.Lock()
	defer fake.listMilestonesMutex.Unlock()
	fake.ListMilestonesStub = nil
	if fake.listMilestonesReturnsOnCall == nil {
		fake.listMilestonesReturnsOnCall = make(map[int]struct {
			result1 []*github.Milestone
			result2 *github.Response
			result3 error
		})
	}
	fake.listMilestonesReturnsOnCall[i] = struct {
		result1 []*github.Milestone
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *IssuesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listByRepoMutex.RLock()
	defer fake.listByRepoMutex.RUnlock()
	fake.listMilestonesMutex.RLock()
	defer fake.listMilestonesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IssuesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
