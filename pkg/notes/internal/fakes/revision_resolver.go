// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/go-git/go-git/v5/plumbing"
)

type RevisionResolver struct {
	ResolveRevisionStub        func(plumbing.Revision) (*plumbing.Hash, error)
	resolveRevisionMutex       sync.RWMutex
	resolveRevisionArgsForCall []struct {
		arg1 plumbing.Revision
	}
	resolveRevisionReturns struct {
		result1 *plumbing.Hash
		result2 error
	}
	resolveRevisionReturnsOnCall map[int]struct {
		result1 *plumbing.Hash
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RevisionResolver) ResolveRevision(arg1 plumbing.Revision) (*plumbing.Hash, error) {
	fake.resolveRevisionMutex.Lock()
	ret, specificReturn := fake.resolveRevisionReturnsOnCall[len(fake.resolveRevisionArgsForCall)]
	fake.resolveRevisionArgsForCall = append(fake.resolveRevisionArgsForCall, struct {
		arg1 plumbing.Revision
	}{arg1})
	stub := fake.ResolveRevisionStub
	fakeReturns := fake.resolveRevisionReturns
	fake.recordInvocation("ResolveRevision", []interface{}{arg1})
	fake.resolveRevisionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *RevisionResolver) ResolveRevisionCallCount() int {
	fake.resolveRevisionMutex.RLock()
	defer fake.resolveRevisionMutex.RUnlock()
	return len(fake.resolveRevisionArgsForCall)
}

func (fake *RevisionResolver) ResolveRevisionCalls(stub func(plumbing.Revision) (*plumbing.Hash, error)) {
	fake.resolveRevisionMutex.Lock()
	defer fake.resolveRevisionMutex.Unlock()
	fake.ResolveRevisionStub = stub
}

func (fake *RevisionResolver) ResolveRevisionArgsForCall(i int) plumbing.Revision {
	fake.resolveRevisionMutex.RLock()
	defer fake.resolveRevisionMutex.RUnlock()
	argsForCall := fake.resolveRevisionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RevisionResolver) ResolveRevisionReturns(result1 *plumbing.Hash, result2 error) {
	fake.resolveRevisionMutex.Lock()
	defer fake.resolveRevisionMutex.Unlock()
	fake.ResolveRevisionStub = nil
	fake.resolveRevisionReturns = struct {
		result1 *plumbing.Hash
		result2 error
	}{result1, result2}
}

func (fake *RevisionResolver) ResolveRevisionReturnsOnCall(i int, result1 *plumbing.Hash, result2 error) {
	fake.resolveRevisionMutex.Lock()
	defer fake.resolveRevisionMutex.Unlock()
	fake.ResolveRevisionStub = nil
	if fake.resolveRevisionReturnsOnCall == nil {
		fake.resolveRevisionReturnsOnCall = make(map[int]struct {
			result1 *plumbing.Hash
			result2 error
		})
	}
	fake.resolveRevisionReturnsOnCall[i] = struct {
		result1 *plumbing.Hash
		result2 error
	}{result1, result2}
}

func (fake *RevisionResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveRevisionMutex.RLock()
	defer fake.resolveRevisionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RevisionResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
