// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/pkg/planitest/internal"
)

type OMRunner struct {
	FindStagedProductStub        func(string) (internal.StagedProduct, error)
	findStagedProductMutex       sync.RWMutex
	findStagedProductArgsForCall []struct {
		arg1 string
	}
	findStagedProductReturns struct {
		result1 internal.StagedProduct
		result2 error
	}
	findStagedProductReturnsOnCall map[int]struct {
		result1 internal.StagedProduct
		result2 error
	}
	GetManifestStub        func(string) (map[string]any, error)
	getManifestMutex       sync.RWMutex
	getManifestArgsForCall []struct {
		arg1 string
	}
	getManifestReturns struct {
		result1 map[string]any
		result2 error
	}
	getManifestReturnsOnCall map[int]struct {
		result1 map[string]any
		result2 error
	}
	ResetAndConfigureStub        func(string, string, string) error
	resetAndConfigureMutex       sync.RWMutex
	resetAndConfigureArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	resetAndConfigureReturns struct {
		result1 error
	}
	resetAndConfigureReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]any
	invocationsMutex sync.RWMutex
}

func (fake *OMRunner) FindStagedProduct(arg1 string) (internal.StagedProduct, error) {
	fake.findStagedProductMutex.Lock()
	ret, specificReturn := fake.findStagedProductReturnsOnCall[len(fake.findStagedProductArgsForCall)]
	fake.findStagedProductArgsForCall = append(fake.findStagedProductArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindStagedProduct", []any{arg1})
	fake.findStagedProductMutex.Unlock()
	if fake.FindStagedProductStub != nil {
		return fake.FindStagedProductStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findStagedProductReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OMRunner) FindStagedProductCallCount() int {
	fake.findStagedProductMutex.RLock()
	defer fake.findStagedProductMutex.RUnlock()
	return len(fake.findStagedProductArgsForCall)
}

func (fake *OMRunner) FindStagedProductCalls(stub func(string) (internal.StagedProduct, error)) {
	fake.findStagedProductMutex.Lock()
	defer fake.findStagedProductMutex.Unlock()
	fake.FindStagedProductStub = stub
}

func (fake *OMRunner) FindStagedProductArgsForCall(i int) string {
	fake.findStagedProductMutex.RLock()
	defer fake.findStagedProductMutex.RUnlock()
	argsForCall := fake.findStagedProductArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OMRunner) FindStagedProductReturns(result1 internal.StagedProduct, result2 error) {
	fake.findStagedProductMutex.Lock()
	defer fake.findStagedProductMutex.Unlock()
	fake.FindStagedProductStub = nil
	fake.findStagedProductReturns = struct {
		result1 internal.StagedProduct
		result2 error
	}{result1, result2}
}

func (fake *OMRunner) FindStagedProductReturnsOnCall(i int, result1 internal.StagedProduct, result2 error) {
	fake.findStagedProductMutex.Lock()
	defer fake.findStagedProductMutex.Unlock()
	fake.FindStagedProductStub = nil
	if fake.findStagedProductReturnsOnCall == nil {
		fake.findStagedProductReturnsOnCall = make(map[int]struct {
			result1 internal.StagedProduct
			result2 error
		})
	}
	fake.findStagedProductReturnsOnCall[i] = struct {
		result1 internal.StagedProduct
		result2 error
	}{result1, result2}
}

func (fake *OMRunner) GetManifest(arg1 string) (map[string]any, error) {
	fake.getManifestMutex.Lock()
	ret, specificReturn := fake.getManifestReturnsOnCall[len(fake.getManifestArgsForCall)]
	fake.getManifestArgsForCall = append(fake.getManifestArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetManifest", []any{arg1})
	fake.getManifestMutex.Unlock()
	if fake.GetManifestStub != nil {
		return fake.GetManifestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getManifestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OMRunner) GetManifestCallCount() int {
	fake.getManifestMutex.RLock()
	defer fake.getManifestMutex.RUnlock()
	return len(fake.getManifestArgsForCall)
}

func (fake *OMRunner) GetManifestCalls(stub func(string) (map[string]any, error)) {
	fake.getManifestMutex.Lock()
	defer fake.getManifestMutex.Unlock()
	fake.GetManifestStub = stub
}

func (fake *OMRunner) GetManifestArgsForCall(i int) string {
	fake.getManifestMutex.RLock()
	defer fake.getManifestMutex.RUnlock()
	argsForCall := fake.getManifestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OMRunner) GetManifestReturns(result1 map[string]any, result2 error) {
	fake.getManifestMutex.Lock()
	defer fake.getManifestMutex.Unlock()
	fake.GetManifestStub = nil
	fake.getManifestReturns = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *OMRunner) GetManifestReturnsOnCall(i int, result1 map[string]any, result2 error) {
	fake.getManifestMutex.Lock()
	defer fake.getManifestMutex.Unlock()
	fake.GetManifestStub = nil
	if fake.getManifestReturnsOnCall == nil {
		fake.getManifestReturnsOnCall = make(map[int]struct {
			result1 map[string]any
			result2 error
		})
	}
	fake.getManifestReturnsOnCall[i] = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *OMRunner) ResetAndConfigure(arg1 string, arg2 string, arg3 string) error {
	fake.resetAndConfigureMutex.Lock()
	ret, specificReturn := fake.resetAndConfigureReturnsOnCall[len(fake.resetAndConfigureArgsForCall)]
	fake.resetAndConfigureArgsForCall = append(fake.resetAndConfigureArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResetAndConfigure", []any{arg1, arg2, arg3})
	fake.resetAndConfigureMutex.Unlock()
	if fake.ResetAndConfigureStub != nil {
		return fake.ResetAndConfigureStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.resetAndConfigureReturns
	return fakeReturns.result1
}

func (fake *OMRunner) ResetAndConfigureCallCount() int {
	fake.resetAndConfigureMutex.RLock()
	defer fake.resetAndConfigureMutex.RUnlock()
	return len(fake.resetAndConfigureArgsForCall)
}

func (fake *OMRunner) ResetAndConfigureCalls(stub func(string, string, string) error) {
	fake.resetAndConfigureMutex.Lock()
	defer fake.resetAndConfigureMutex.Unlock()
	fake.ResetAndConfigureStub = stub
}

func (fake *OMRunner) ResetAndConfigureArgsForCall(i int) (string, string, string) {
	fake.resetAndConfigureMutex.RLock()
	defer fake.resetAndConfigureMutex.RUnlock()
	argsForCall := fake.resetAndConfigureArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *OMRunner) ResetAndConfigureReturns(result1 error) {
	fake.resetAndConfigureMutex.Lock()
	defer fake.resetAndConfigureMutex.Unlock()
	fake.ResetAndConfigureStub = nil
	fake.resetAndConfigureReturns = struct {
		result1 error
	}{result1}
}

func (fake *OMRunner) ResetAndConfigureReturnsOnCall(i int, result1 error) {
	fake.resetAndConfigureMutex.Lock()
	defer fake.resetAndConfigureMutex.Unlock()
	fake.ResetAndConfigureStub = nil
	if fake.resetAndConfigureReturnsOnCall == nil {
		fake.resetAndConfigureReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetAndConfigureReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OMRunner) Invocations() map[string][][]any {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findStagedProductMutex.RLock()
	defer fake.findStagedProductMutex.RUnlock()
	fake.getManifestMutex.RLock()
	defer fake.getManifestMutex.RUnlock()
	fake.resetAndConfigureMutex.RLock()
	defer fake.resetAndConfigureMutex.RUnlock()
	copiedInvocations := map[string][][]any{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OMRunner) recordInvocation(key string, args []any) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]any{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]any{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.OMRunnerI = new(OMRunner)
